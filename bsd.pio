;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
.pio_version 0 // only requires PIO version 0

.program bsd
.side_set 1 opt

; The following constants are selected for broad compatibility with BSD,
; BSDB, and SK6812 LEDs. Other constants may support higher bandwidths for
; specific LEDs, such as (7,10,8) for BSDB LEDs.

.define public T1 6
.define public T2 6
.define public T3 4

.lang_opt python sideset_init = pico.PIO.OUT_HIGH
.lang_opt python out_init     = pico.PIO.OUT_HIGH
.lang_opt python out_shiftdir = 1

sync_loop:
    set x, 2 side 1 [7]
sync_loop1:
    set pins, 0    side 0 [1]
    set pins, 1    side 1 [6]
    jmp x-- sync_loop1 side 1 [6]

sync_loop2:
    set pins, 0    side 0 [1]      ; 2
    set pins, 1    side 1 [5]      ; 6
    jmp !osre send_data side 1 [3] ; 4
    jmp sync_loop2 side 1 [3]      ; 4

send_data:
    set x, 8 side 1 [1]       ; 2

bitloop:
    nop side 1 [1]            ; 2
    out y, 1       side 0 [1] ; 2
    jmp !y do_zero side 0 [3] ; 4
    jmp do_one side 0 [5]     ; 6

do_zero:
    jmp continue side 1 [5]   ; 6
do_one:
    ; nop side 0 [3]            ; 4

continue:
    jmp x--, bitloop side 1 [1]  ; 2

    set x, 9 side 1
    ; set pins, 0

rx_data:
    set pindirs, 1                ; 1
    set pins, 0                   ; 1
    set pindirs, 0  [6]           ; 7
    in pins, 1 [5]                ; 6
    jmp x--, rx_data              ; 1

    set pindirs, 1 side 1

    set pins, 0    side 0 [1]
    set pins, 1    side 1 [2]
    jmp sync_loop side 1 [2]

.wrap_target
    nop
    ; set pins, 0    side 0 [1]
    ; set pins, 1    side 1 [13]
    ; jmp osre bitloop side 1 [1]
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void bsd_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, bool rgbw) {

    pio_gpio_init(pio, pin);
    gpio_pull_up(pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = bsd_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 9);
    // sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    sm_config_set_in_pins(&c, pin);
    sm_config_set_in_shift(&c, false, true, 10);
    // sm_config_set_in_shift(&c, true, true, 10);

    int cycles_per_bit = bsd_T1 + bsd_T2 + bsd_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
