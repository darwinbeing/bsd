.pio_version 0 // only requires PIO version 0

.program bsd_read
.side_set 1 opt

.lang_opt python sideset_init = pico.PIO.OUT_HIGH
.lang_opt python out_init     = pico.PIO.OUT_HIGH
.lang_opt python out_shiftdir = 1

; 1 bit per 16 cycles
sync_loop:
    set x, 4
sync_loop1:
    set pins, 0    side 0 [1]
    set pins, 1    side 1 [6]
    jmp x-- sync_loop1 side 1 [6]

    set x, 8 side 1 [1]       ; 2
bitloop:
    nop side 1 [1]            ; 2
    out y, 1       side 0 [1] ; 2
    jmp !y do_zero side 0 [3] ; 4
    jmp do_one side 0 [5]     ; 6

do_zero:
    jmp continue side 1 [5]   ; 6
do_one:
    ; nop side 0 [3]            ; 4

continue:
    jmp x--, bitloop side 1 [1]  ; 2

    set x, 9 side 1

rx_data:
    set pindirs, 1                ; 1
    set pins, 0                   ; 1
    set pindirs, 0  [6]           ; 7
    in pins, 1 [5]                ; 6
    jmp x--, rx_data              ; 1

    set pindirs, 1 side 1

.wrap_target
    jmp !osre sync_loop
.wrap


.program bsd_write
.side_set 1 opt

.wrap_target
    nop
.wrap


% c-sdk {
#include "hardware/clocks.h"

static inline void bsd_program_init(PIO pio, uint sm_read, uint sm_write, uint pin, float freq)
{
    pio_gpio_init(pio, pin);
    gpio_pull_up(pin);
    // The pin muxes can be configured to invert the output
    // gpio_set_outover(pin, GPIO_OVERRIDE_NORMAL);
    // gpio_set_outover(pin, GPIO_OVERRIDE_INVERT);
    // gpio_set_inover(pin, GPIO_OVERRIDE_INVERT);
    // BSD is synchronous, so bypass input synchroniser to reduce input delay.
    // hw_set_bits(&pio->input_sync_bypass, 1u << pin);
    gpio_set_input_hysteresis_enabled(pin, true);
    // Use fast slew rate for BSD Bus.
    gpio_set_slew_rate(pin, GPIO_SLEW_RATE_FAST);
    gpio_set_drive_strength(pin, GPIO_DRIVE_STRENGTH_12MA);

    // state machine read
    uint bsd_read_offset = pio_add_program(pio, &bsd_read_program);
    pio_sm_config sm_read_config = bsd_read_program_get_default_config(bsd_read_offset);
    pio_sm_set_consecutive_pindirs(pio, sm_read, pin, 1, true);
    sm_config_set_out_pins(&sm_read_config, pin, 1);
    sm_config_set_set_pins(&sm_read_config, pin, 1);
    sm_config_set_sideset_pins(&sm_read_config, pin);
    sm_config_set_out_shift(&sm_read_config, false, true, 9);

    pio_sm_set_pins_with_mask(pio, sm_read, 1u << pin, 1u << pin);
    pio_sm_set_pindirs_with_mask(pio, sm_read, 1u << pin, 1u << pin);

    sm_config_set_in_pins(&sm_read_config, pin);
    sm_config_set_in_shift(&sm_read_config, false, true, 10);

    int cycles_per_bit = 16;
    float div_read = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&sm_read_config, div_read);

    pio_sm_init(pio, sm_read, bsd_read_offset, &sm_read_config);


    // state machine write
    // uint bsd_write_offset = pio_add_program(pio, &bsd_write_program);
    // pio_sm_config sm_write_config = bsd_write_program_get_default_config(bsd_write_offset);
    // pio_sm_set_consecutive_pindirs(pio, sm_write, pin, 1, true);
    // sm_config_set_out_pins(&sm_write_config, pin, 1);
    // sm_config_set_set_pins(&sm_write_config, pin, 1);
    // sm_config_set_sideset_pins(&sm_write_config, pin);
    // sm_config_set_out_shift(&sm_write_config, false, true, 9);

    // pio_sm_set_pins_with_mask(pio, sm_write, 1u << pin, 1u << pin);
    // pio_sm_set_pindirs_with_mask(pio, sm_write, 1u << pin, 1u << pin);

    // sm_config_set_in_pins(&sm_write_config, pin);
    // sm_config_set_in_shift(&sm_write_config, false, true, 10);

    // cycles_per_bit = 16;
    // float div_write = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    // sm_config_set_clkdiv(&sm_write_config, div_write);

    // pio_sm_init(pio, sm_write, bsd_write_offset, &sm_write_config);

    // pio_sm_set_enabled(pio, sm_write, true);
    pio_sm_set_enabled(pio, sm_read, true);
}
%}
